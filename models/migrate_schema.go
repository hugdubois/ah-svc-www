// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/www.proto
package models

import (
	"fmt"
	"strings"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
	log "github.com/sirupsen/logrus"
)

type Logger struct{}

func (*Logger) Print(v ...interface{}) {
	if v[0] == "sql" {
		log.WithFields(log.Fields{"module": "gorm", "type": "sql"}).Debug(v[3])
	}
	if v[0] == "log" {
		log.WithFields(log.Fields{"module": "gorm", "type": "log"}).Warn(v[2])
	}
}

func MigrateSchema(dsn string) error {

	db, err := gorm.Open("sqlite3", dsn)
	if err != nil {
		return fmt.Errorf("Sqlite database connection error: %v", err)
	}
	defer db.Close()
	db.SetLogger(&Logger{})
	db.LogMode(true)
	mdls := sqliteModels()
	if len(mdls) > 0 {
		db.AutoMigrate(mdls...)
		for _, mdl := range mdls {
			if !db.HasTable(mdl) {
				return fmt.Errorf("Schema migration error: the %v table does not exist", mdl)
			}
		}
	}

	return nil
}

func Flush(dsn string) error {

	db, err := gorm.Open("sqlite3", dsn)
	if err != nil {
		return fmt.Errorf("Sqlite database connection error: %v", err)
	}
	defer db.Close()
	db.SetLogger(&Logger{})
	db.LogMode(true)
	mdls := sqliteModels()
	errs := []error{}
	if len(mdls) > 0 {
		for _, mdl := range mdls {
			scope := db.NewScope(mdl)
			quotedTableName := scope.QuotedTableName()
			if err := db.Exec(fmt.Sprintf("DELETE FROM %s;", quotedTableName)).Error; err != nil {

				errs = append(errs, err)
			}
		}
	}

	if len(errs) > 0 {
		sErrs := []string{}
		for _, e := range errs {
			sErrs = append(sErrs, e.Error())
		}
		return fmt.Errorf("some errors occured :\n  %s", strings.Join(sErrs, "\n  "))
	}

	return nil
}
