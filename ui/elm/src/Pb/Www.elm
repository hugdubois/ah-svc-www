module Pb.Www exposing (..)

-- DO NOT EDIT
-- AUTOGENERATED BY THE ELM PROTOCOL BUFFER COMPILER
-- https://github.com/tiziano88/elm-protobuf
-- source file: pb/www.proto

import Protobuf exposing (..)

import Json.Decode as JD
import Json.Encode as JE


type alias EmptyMessage =
    {
    }


emptyMessageDecoder : JD.Decoder EmptyMessage
emptyMessageDecoder =
    JD.lazy <| \_ -> decode EmptyMessage


emptyMessageEncoder : EmptyMessage -> JE.Value
emptyMessageEncoder v =
    JE.object <| List.filterMap identity <|
        [
        ]


type alias VersionResponse =
    { name : String -- 1
    , version : String -- 2
    }


versionResponseDecoder : JD.Decoder VersionResponse
versionResponseDecoder =
    JD.lazy <| \_ -> decode VersionResponse
        |> required "name" JD.string ""
        |> required "version" JD.string ""


versionResponseEncoder : VersionResponse -> JE.Value
versionResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "version" JE.string "" v.version)
        ]


type alias ServiceStatus =
    { name : String -- 1
    , version : String -- 2
    , status : ServiceStatus_Status -- 3
    , eMsg : String -- 4
    }


type ServiceStatus_Status
    = ServiceStatus_Ok -- 0
    | ServiceStatus_Unavailable -- 1


serviceStatusDecoder : JD.Decoder ServiceStatus
serviceStatusDecoder =
    JD.lazy <| \_ -> decode ServiceStatus
        |> required "name" JD.string ""
        |> required "version" JD.string ""
        |> required "status" serviceStatus_StatusDecoder serviceStatus_StatusDefault
        |> required "eMsg" JD.string ""


serviceStatus_StatusDecoder : JD.Decoder ServiceStatus_Status
serviceStatus_StatusDecoder =
    let
        lookup s =
            case s of
                "OK" ->
                    ServiceStatus_Ok

                "UNAVAILABLE" ->
                    ServiceStatus_Unavailable

                _ ->
                    ServiceStatus_Ok
    in
        JD.map lookup JD.string


serviceStatus_StatusDefault : ServiceStatus_Status
serviceStatus_StatusDefault = ServiceStatus_Ok


serviceStatusEncoder : ServiceStatus -> JE.Value
serviceStatusEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "name" JE.string "" v.name)
        , (requiredFieldEncoder "version" JE.string "" v.version)
        , (requiredFieldEncoder "status" serviceStatus_StatusEncoder serviceStatus_StatusDefault v.status)
        , (requiredFieldEncoder "eMsg" JE.string "" v.eMsg)
        ]


serviceStatus_StatusEncoder : ServiceStatus_Status -> JE.Value
serviceStatus_StatusEncoder v =
    let
        lookup s =
            case s of
                ServiceStatus_Ok ->
                    "OK"

                ServiceStatus_Unavailable ->
                    "UNAVAILABLE"

    in
        JE.string <| lookup v


type alias ServicesStatusList =
    { services : List ServiceStatus -- 1
    }


servicesStatusListDecoder : JD.Decoder ServicesStatusList
servicesStatusListDecoder =
    JD.lazy <| \_ -> decode ServicesStatusList
        |> repeated "services" serviceStatusDecoder


servicesStatusListEncoder : ServicesStatusList -> JE.Value
servicesStatusListEncoder v =
    JE.object <| List.filterMap identity <|
        [ (repeatedFieldEncoder "services" serviceStatusEncoder v.services)
        ]


type alias RsvpCreationRequest =
    { names : String -- 1
    , email : String -- 2
    , presence : Bool -- 3
    , childrenNameAge : String -- 4
    , housing : Bool -- 5
    , music : String -- 6
    , brunch : Bool -- 7
    }


rsvpCreationRequestDecoder : JD.Decoder RsvpCreationRequest
rsvpCreationRequestDecoder =
    JD.lazy <| \_ -> decode RsvpCreationRequest
        |> required "names" JD.string ""
        |> required "email" JD.string ""
        |> required "presence" JD.bool False
        |> required "childrenNameAge" JD.string ""
        |> required "housing" JD.bool False
        |> required "music" JD.string ""
        |> required "brunch" JD.bool False


rsvpCreationRequestEncoder : RsvpCreationRequest -> JE.Value
rsvpCreationRequestEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "names" JE.string "" v.names)
        , (requiredFieldEncoder "email" JE.string "" v.email)
        , (requiredFieldEncoder "presence" JE.bool False v.presence)
        , (requiredFieldEncoder "childrenNameAge" JE.string "" v.childrenNameAge)
        , (requiredFieldEncoder "housing" JE.bool False v.housing)
        , (requiredFieldEncoder "music" JE.string "" v.music)
        , (requiredFieldEncoder "brunch" JE.bool False v.brunch)
        ]


type alias RsvpInfo =
    { uuid : String -- 1
    , names : String -- 2
    , email : String -- 3
    , presence : Bool -- 4
    , childrenNameAge : String -- 5
    , housing : Bool -- 6
    , music : String -- 7
    , brunch : Bool -- 8
    , createdAt : String -- 9
    , updatedAt : String -- 10
    , deletedAt : String -- 11
    }


rsvpInfoDecoder : JD.Decoder RsvpInfo
rsvpInfoDecoder =
    JD.lazy <| \_ -> decode RsvpInfo
        |> required "uuid" JD.string ""
        |> required "names" JD.string ""
        |> required "email" JD.string ""
        |> required "presence" JD.bool False
        |> required "childrenNameAge" JD.string ""
        |> required "housing" JD.bool False
        |> required "music" JD.string ""
        |> required "brunch" JD.bool False
        |> required "createdAt" JD.string ""
        |> required "updatedAt" JD.string ""
        |> required "deletedAt" JD.string ""


rsvpInfoEncoder : RsvpInfo -> JE.Value
rsvpInfoEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "uuid" JE.string "" v.uuid)
        , (requiredFieldEncoder "names" JE.string "" v.names)
        , (requiredFieldEncoder "email" JE.string "" v.email)
        , (requiredFieldEncoder "presence" JE.bool False v.presence)
        , (requiredFieldEncoder "childrenNameAge" JE.string "" v.childrenNameAge)
        , (requiredFieldEncoder "housing" JE.bool False v.housing)
        , (requiredFieldEncoder "music" JE.string "" v.music)
        , (requiredFieldEncoder "brunch" JE.bool False v.brunch)
        , (requiredFieldEncoder "createdAt" JE.string "" v.createdAt)
        , (requiredFieldEncoder "updatedAt" JE.string "" v.updatedAt)
        , (requiredFieldEncoder "deletedAt" JE.string "" v.deletedAt)
        ]


type alias RsvpCreationResponse =
    { ok : Bool -- 1
    , info : Maybe RsvpInfo -- 2
    }


rsvpCreationResponseDecoder : JD.Decoder RsvpCreationResponse
rsvpCreationResponseDecoder =
    JD.lazy <| \_ -> decode RsvpCreationResponse
        |> required "ok" JD.bool False
        |> optional "info" rsvpInfoDecoder


rsvpCreationResponseEncoder : RsvpCreationResponse -> JE.Value
rsvpCreationResponseEncoder v =
    JE.object <| List.filterMap identity <|
        [ (requiredFieldEncoder "ok" JE.bool False v.ok)
        , (optionalEncoder "info" rsvpInfoEncoder v.info)
        ]
