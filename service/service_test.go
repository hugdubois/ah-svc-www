// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/www.proto
// Package service provides gRPC/HTTP service registration
package service

import (
	"errors"
	"flag"
	"fmt"
	"os"
	"sync"
	"testing"

	"github.com/fullstorydev/grpchan"
	"github.com/fullstorydev/grpchan/inprocgrpc"
	log "github.com/sirupsen/logrus"
	"github.com/stretchr/testify/assert"

	gomeetService "github.com/gomeet/gomeet/utils/service"

	"github.com/hugdubois/ah-svc-www/models"

	"github.com/hugdubois/ah-svc-www/client"
	pb "github.com/hugdubois/ah-svc-www/pb"
)

var (
	debugMode  bool
	svc        *Service
	cli        pb.WwwClient
	jwtKey     string
	caCert     string
	serverCert string
	serverKey  string
	// Main server database and extra flags

	sqliteDSN string

	// SubService databases and extra flags

)

func init() {
	// force debug mode
	flag.BoolVar(&debugMode, "d", false, "Force debug mode")
	// JWT secret signing key
	flag.StringVar(&jwtKey, "jwt-secret", "", "JSON Web Token secret signing key (required for JWT support)")
	// CA certificate
	flag.StringVar(&caCert, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")
	// gRPC server certificate
	flag.StringVar(&serverCert, "cert", "", "X.509 certificate of the gRPC server (required for gRPC TLS support)")
	// gRPC server private key
	flag.StringVar(&serverKey, "key", "", "RSA private key of the gRPC server (required for gRPC TLS support)")

	// Sqlite data source name: http://gorm.io/database.html#connecting-to-a-database
	flag.StringVar(&sqliteDSN, "sqlite-dsn", "", "Sqlite data source file")

	flag.Parse()

	svc = NewService(gomeetService.INPROCESS_ADDRESS)
	log.SetLevel(log.PanicLevel)
	if debugMode {
		log.SetLevel(log.DebugLevel)
		log.WithFields(log.Fields{
			"Name":    svc.Name,
			"Version": svc.Version,
		}).Debug("set log debug level")
	}

	log.WithFields(log.Fields{
		"sqliteDSN": sqliteDSN,
	}).Debug("sqliteDSN flag")

}

func flushAllDbTest(t *testing.T) {

	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		defer wg.Done()
		flushDbTest(t)
	}()

	wg.Wait()

}
func migrateAllDbTest() error {

	if err := migrateDbTest(); err != nil {
		return err
	}
	return nil
}

func migrateDbTest() error {
	var err error

	if sqliteDSN == "" {
		return errors.New("sqliteDSN is empty")
	}
	err = models.MigrateSchema(sqliteDSN)

	return err

}
func flushDbTest(t *testing.T) {
	var err error

	assert.NotEmpty(t, sqliteDSN, "sqliteDSN is empty")

	err = models.MigrateSchema(sqliteDSN)

	assert.Nil(t, err, fmt.Sprintf("ah-svc-www - sqlite database migration fail - dsn: %s", sqliteDSN))

	err = models.Flush(sqliteDSN)

	assert.Nil(t, err, fmt.Sprintf("ah-svc-www - sqlite database migration fail - dsn: %s", sqliteDSN))

}

func TestMain(m *testing.M) {
	sInterceptors, uInterceptors := gomeetService.Interceptors()
	subServiceshandlers := grpchan.HandlerMap{}

	inProcessChannel := new(inprocgrpc.Channel)
	reg := grpchan.WithInterceptor(subServiceshandlers, uInterceptors, sInterceptors)

	//Real server
	svc.RegisterGRPCServices(
		reg, inProcessChannel,
		jwtKey, caCert, serverCert, serverKey,
		sqliteDSN,
	)

	subServiceshandlers.ForEach(inProcessChannel.RegisterService)

	gCli, err := client.NewGomeetInProcessClient(inProcessChannel)
	if err != nil {
		fmt.Printf("Test fail : %s\n", err.Error())
		os.Exit(1)
	}

	cli = gCli.GetGRPCClient()

	if err := migrateAllDbTest(); err != nil {
		fmt.Printf("Test fail : %s\n", err.Error())
		os.Exit(1)
	}

	r := m.Run()

	os.Exit(r)
}
