// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/www.proto
package cmd

import (
	"bufio"
	"fmt"
	"github.com/fatih/color"
	"github.com/mattn/go-colorable"
	"os"
	"strings"

	"github.com/hugdubois/ah-svc-www/models"

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"
)

var (
	migrateCmd = &cobra.Command{
		Use:   "migrate",
		Short: "Migrates the user database schema",
		Run:   migrateSchema,
	}
	migrateSkipPrompt           bool
	sqliteMigrateDataSourceName string
	sqliteMigrateFlush          bool

	migrateOut = colorable.NewColorableStdout()
)

func init() {
	rootCmd.AddCommand(migrateCmd)

	// force debug mode
	migrateCmd.PersistentFlags().BoolVarP(&debugMode, "debug", "d", false, "Force debug mode")
	migrateCmd.PersistentFlags().BoolVarP(&migrateSkipPrompt, "skip-prompt", "y", false, "Skip interactive prompt if is set default")

	migrateCmd.PersistentFlags().BoolVar(&sqliteMigrateFlush, "sqlite-flush-data", false, "Flush Sqlite data")
	// Sqlite data source name: http://gorm.io/database.html#connecting-to-a-database
	migrateCmd.PersistentFlags().StringVar(&sqliteMigrateDataSourceName, "sqlite-dsn", "", "Sqlite data source file")
}

func askIsOK(msg string) bool {
	if os.Getenv("CI") != "" {
		return true
	}

	if msg == "" {
		msg = "Is this OK?"
	}

	fmt.Fprintf(migrateOut, "%s %ses/%so\n",
		msg,
		color.YellowString("[y]"),
		color.CyanString("[N]"),
	)

	scan := bufio.NewScanner(os.Stdin)
	scan.Scan()
	return strings.Contains(strings.ToLower(scan.Text()), "y")
}

func migrateSchema(cmd *cobra.Command, args []string) {
	var (
		err    error
		hasOne bool
	)

	if debugMode {
		log.SetLevel(log.DebugLevel)
		log.Debug("set log debug level")
	} else {
		// by default for embedded server only panic are logged
		log.SetLevel(log.PanicLevel)
	}

	// initialize the sqlite database schema
	if sqliteMigrateDataSourceName != "" {
		hasOne = true
		err = models.MigrateSchema(sqliteMigrateDataSourceName)

		if err != nil {
			fmt.Printf("Sqlite schema migration error: %s\n", err)
			os.Exit(1)
		}
		fmt.Println("Sqlite database schema was successfully migrated")

		if sqliteMigrateFlush {
			if migrateSkipPrompt || askIsOK("Are you sure you want flush sqlite data ?") {
				err = models.Flush(sqliteMigrateDataSourceName)

				if err != nil {
					fmt.Printf("Sqlite database flush error: %s\n", err)
					os.Exit(1)
				}
				fmt.Println("Sqlite database is flushed")
			}
		}
	}

	if !hasOne {
		fmt.Println("No migration found")
		fmt.Println("Use one of flags :")
		fmt.Println("   --sqlite-dsn")
	}
}
