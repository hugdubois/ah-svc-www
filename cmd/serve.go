// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/www.proto
package cmd

import (
	"os"
	"strings"

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	"github.com/hugdubois/ah-svc-www/models"
	"github.com/hugdubois/ah-svc-www/server"
)

var (
	debugMode          bool
	serverAddress      string
	grpcServerAddress  string
	httpServerAddress  string
	corsAllowedOrigins string
	jwtSecret          string

	//Main server database and extra flags
	sqliteMigrate        bool
	sqliteDataSourceName string

	// SubService databases and extra flags

	// serveCmd represents the serve serve command
	serveCmd = &cobra.Command{
		Use:   "serve",
		Short: "Launches the ah-svc-www service webserver",

		Run: func(cmd *cobra.Command, args []string) {
			serve()
		},
	}
)

func init() {
	rootCmd.AddCommand(serveCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:

	// force debug mode
	serveCmd.PersistentFlags().BoolVarP(&debugMode, "debug", "d", false, "Force debug mode")

	// address flag (to serve all protocols on a single port)
	serveCmd.PersistentFlags().StringVarP(&serverAddress, "address", "a", ":13000", "Multiplexed gRPC/HTTP server address")

	// gRPC address flag (to serve gRPC on a separate address)
	serveCmd.PersistentFlags().StringVar(&grpcServerAddress, "grpc-address", "", "gRPC server address")

	// HTTP/1.1 address flag (to serve HTTP on a separate address)
	serveCmd.PersistentFlags().StringVar(&httpServerAddress, "http-address", "", "HTTP server address")

	// cors flag
	serveCmd.PersistentFlags().StringVarP(&corsAllowedOrigins, "cors", "c", "*", "Cross Origin Resource Sharing AllowedOrigins (string) separed by | ex: http://*gomeet.com|http://*example.com")

	// JWT secret signing key
	serveCmd.PersistentFlags().StringVarP(&jwtSecret, "jwt-secret", "j", "", "JSON Web Token secret signing key (required for JWT support)")

	// CA certificate
	serveCmd.PersistentFlags().StringVar(&caCertificate, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")

	// gRPC server certificate
	serveCmd.PersistentFlags().StringVar(&serverCertificate, "cert", "", "X.509 certificate of the gRPC server (required for gRPC TLS support)")

	// gRPC server private key
	serveCmd.PersistentFlags().StringVar(&serverPrivateKey, "key", "", "RSA private key of the gRPC server (required for gRPC TLS support)")

	// EXTRA : flags
	// Sqlite data migration on start
	serveCmd.PersistentFlags().BoolVar(&sqliteMigrate, "sqlite-migrate", false, "Sqlite data migration on start")
	// Sqlite data source name: http://gorm.io/database.html#connecting-to-a-database
	serveCmd.PersistentFlags().StringVar(&sqliteDataSourceName, "sqlite-dsn", "", "Sqlite data source file")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// serveCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")
}

func databaseMigration() {
	// Sqlite data migration on start
	if sqliteMigrate {
		if sqliteDataSourceName == "" {
			log.Errorf("The --sqlite-dsn flag is required for automatic schema migration")
			os.Exit(1)
		}

		err := models.MigrateSchema(sqliteDataSourceName)

		if err != nil {
			log.Errorf("Database schema migration failure: %v\n", err)
			os.Exit(1)
		}
	}
}

func serve() {
	if strings.HasSuffix(svc.Version, "+dev") || debugMode {
		log.SetLevel(log.DebugLevel)
		log.WithFields(log.Fields{
			"Name":     svc.Name,
			"Version":  svc.Version,
			"FullName": svcName,
		}).Debug("set log debug level")
	}

	log.Infof("%s version %s - %s", svc.Name, svc.Version, svcName)

	//SubServices databaseMigration
	databaseMigration()
	var ok bool
	if grpcServerAddress != "" && httpServerAddress != "" {
		ok = server.OnMultipleAddresses(
			grpcServerAddress, httpServerAddress,
			corsAllowedOrigins,
			caCertificate, serverCertificate, serverPrivateKey, jwtSecret,
			sqliteDataSourceName)
	} else {
		ok = server.OnSingleAddress(
			serverAddress,
			corsAllowedOrigins,
			caCertificate, serverCertificate, serverPrivateKey, jwtSecret,
			sqliteDataSourceName)
	}
	if !ok {
		log.Errorf("AhSvcWww starting failure: grpcServerAddress: %s, httpServerAddress: %s\n", grpcServerAddress, httpServerAddress)
		os.Exit(1)
	}
}
