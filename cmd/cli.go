// Code generated by protoc-gen-gomeet-service. DO NOT EDIT.
// source: pb/www.proto
package cmd

import (
	"strings"

	log "github.com/sirupsen/logrus"
	"github.com/spf13/cobra"

	rcli "github.com/hugdubois/ah-svc-www/cmd/remotecli"
)

// cliCmd represents the cli command
var (
	cliAddress string
	cliCmd     = &cobra.Command{
		Use:   "cli [gRPC service] [args...]",
		Short: "Cli on ah-svc-www service",
		Long: `Use this command cli ah-svc-www service

Example :
  $ ah-svc-www cli version
  $ ah-svc-www cli services_status
  $ ah-svc-www cli rsvp_creation <names [string]> <email [string]> <presence [bool]> <children_name_age [string]> <housing [bool]> <music [string]> <brunch [bool]>
  $ ah-svc-www cli --address localhost:42000 version

`,
		Run: cli,
	}
)

func init() {
	rootCmd.AddCommand(cliCmd)

	// Here you will define your flags and configuration settings.

	// Cobra supports Persistent Flags which will work for this command
	// and all subcommands, e.g.:
	// Port flag
	cliCmd.PersistentFlags().StringVar(&cliAddress, "address", "localhost:13000", "Server address")

	// CA certificate
	cliCmd.PersistentFlags().StringVar(&caCertificate, "ca", "", "X.509 certificate of the Certificate Authority (required for gRPC TLS support)")

	// gRPC client certificate
	cliCmd.PersistentFlags().StringVar(&clientCertificate, "cert", "", "X.509 certificate of the gRPC client (required for gRPC TLS support)")

	// gRPC client private key
	cliCmd.PersistentFlags().StringVar(&clientPrivateKey, "key", "", "RSA private key of the gRPC client (required for gRPC TLS support)")

	// gRPC timeout
	cliCmd.PersistentFlags().IntVar(&timeoutSeconds, "timeout", 5, "gRPC timeout in seconds")

	// JSON Web Token
	cliCmd.PersistentFlags().StringVar(&jwtToken, "jwt", "", "JSON Web Token")

	// Cobra supports local flags which will only run when this command
	// is called directly, e.g.:
	// cliCmd.Flags().BoolP("toggle", "t", false, "Help message for toggle")

}

func cli(cmd *cobra.Command, args []string) {
	// Cli must have at least one argument
	if len(args) < 1 {
		log.Fatal("Bad arguments")
	}

	// Initialize remote cli
	c, err := rcli.NewRemoteCli(
		svc.Name,
		svc.Version,
		rcli.CliCall,
		cliAddress,
		timeoutSeconds,
		caCertificate,
		clientCertificate,
		clientPrivateKey,
		jwtToken,
	)
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	// Defer remote cli closing
	defer c.Close()

	// Convert arguments to string
	line := strings.Join(args, " ")

	// Evaluate arguments string
	ok, err := c.Eval(line)
	if err != nil {
		log.Fatal(err)
	}
	log.Info(ok)
}
